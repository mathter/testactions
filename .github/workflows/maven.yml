# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  actions: write
  repository-projects: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
#     - name: Set up JDK 8
#       uses: actions/setup-java@v3
#       with:
#         java-version: '8'
#         distribution: 'liberica'
#         cache: maven
        
    - name: Set up Apache Maven Central
      uses: actions/setup-java@v3
      with: # running setup-java again overwrites the settings.xml
        distribution: 'liberica'
        java-version: '8'
        server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: OSSRH_USERNAME # env variable for username in deploy
        server-password: OSSRH_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.GPG_KEY }} # Value of the GPG private key to import
        gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase
    - name: Configure git
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "mathter@mail.ru"
        git config --global user.name "auto.mathter"
        git remote remove origin
        # git remote add origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
    - name: Build with Maven
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: mvn -B release:prepare release:stage --file pom.xml -P release
